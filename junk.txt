JS :

/*
document.addEventListener("DOMContentLoaded", function() {
    fetchEmployeeDetails();
});

function fetchEmployeeDetails() {
    fetch('/employee/details')
        .then(response => response.json())
        .then(data => {
            let detailsDiv = document.getElementById("employeeDetails");

            if (data.error) {
                detailsDiv.innerHTML = `<p style="color: red;">Error: ${data.error}</p>`;
                return;
            }
            let detailsHtml = `
                <h3>Employee Details</h3>
                <p><strong>E_id:</strong> ${data.E_id}</p>
                <p><strong>Name:</strong> ${data.E_name}</p>
                <p><strong>Designation:</strong> ${data.Designation}</p>
                <p><strong>Department:</strong> ${data.Department}</p>
                <p><strong>Gross Salary:</strong> $${data.Gross_salary.toFixed(2)}</p>
                <p><strong>Deductible:</strong> $${data.Deductable.toFixed(2)}</p>
                <p><strong>Net Salary:</strong> $${data.Net_Salary.toFixed(2)}</p>
            `;

            detailsDiv.innerHTML = detailsHtml;
        })
        .catch(error => console.error("Error fetching employee details:", error));
}


function logout() {
    fetch('/logout', { method: 'POST' })
        .then(() => window.location.href = "/login")
        .catch(error => console.error("Logout Error:", error));
}
*/


HTML :

<!--
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Employee Dashboard</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/styles.css') }}">
    <script src="{{ url_for('static', filename='js/employee.js') }}" defer></script>
</head>
<body>
    <div class="container">
        <h2>Employee Dashboard</h2>
        <div>
            <button onclick="location.href='/auth/change-password'">Change Password</button>
            <button onclick="location.href='/auth/logout'">Logout</button>
        </div>
    </div>
</body>
</html>


<div id="employeeDetails">
            <h3>Employee Details</h3>
            <p><strong>Name:</strong> {{ employee.E_name }}</p>
            <p><strong>Designation:</strong> {{ employee.Designation }}</p>
            <p><strong>Department:</strong> {{ employee.Department }}</p>
            <p><strong>Gross Salary:</strong> ${{ employee.Gross_salary }}</p>
            <p><strong>Deductible:</strong> ${{ employee.Deductable }}</p>
            <p><strong>Net Salary:</strong> ${{ employee.Net_Salary }}</p>
        </div>
-->


py:

   
'''
    return render_template('employee_dashboard.html', employee=employee_dict)

     employee_dict = {
        "E_id": employee_data[0],
        "E_name": employee_data[1],
        "Designation": employee_data[2],
        "Department": employee_data[3],
        "Gross_salary": float(employee_data[4]),
        "Deductable": float(employee_data[5]),
        "Net_Salary": float(employee_data[6])
    }

'''



# This is not needed redundent code . re routed to auth.py for common functionality 
'''
@employee_blueprint.route('/change-password', methods=['GET', 'POST'])
def change_password():
    """Allows employees to change their password and logs them out after update."""
    if 'user_id' not in session:
        return redirect(url_for('auth.login'))

    if request.method == 'POST':
        old_password = request.form['old_password']
        new_password = request.form['new_password']
        confirm_password = request.form['confirm_password']

        if new_password != confirm_password:
            flash("New passwords do not match", "danger")
            return redirect(url_for('employee.change_password'))

        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute("SELECT password_hash FROM payroll.users WHERE user_id = %s", (session['user_id'],))
        stored_password = cursor.fetchone()[0]

        if not check_password_hash(stored_password, old_password):
            flash("Old password is incorrect", "danger")
            return redirect(url_for('employee.change_password'))

        # Hash new password before storing
        new_password_hash = generate_password_hash(new_password)

        cursor.execute("UPDATE payroll.users SET password_hash = %s WHERE user_id = %s", (new_password_hash, session['user_id']))
        conn.commit()

        cursor.close()
        conn.close()

        # Log the user out after a successful password change
        session.clear()
        flash("Password changed successfully! Please log in again.", "success")
        return redirect(url_for('auth.login'))  # Redirect to login page

    return render_template('change_password.html')
'''

'''
from flask import Flask, render_template, redirect, url_for, session
from routes.auth import auth_blueprint
from routes.employee import employee_blueprint
from routes.manager import manager_blueprint
from routes.admin import admin_blueprint
from models.database import get_db_connection
from datetime import timedelta 

app = Flask(__name__)

# Configuration settings
app.config['SECRET_KEY'] = 'your_secret_key_here' # cookies 
#app.config['SESSION_TYPE'] = 'filesystem' # what is the types of saved cookies on server side.

#app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(seconds=10)

# Register Blueprints
app.register_blueprint(auth_blueprint)
app.register_blueprint(employee_blueprint)
app.register_blueprint(admin_blueprint)
app.register_blueprint(manager_blueprint)

@app.route('/')
def home():
    """Landing Page"""
    if 'role' in session:
        return redirect(url_for('dashboard'))
    return redirect(url_for('auth.login'))

@app.route('/dashboard')
def dashboard():
    """Redirect users based on role"""
    if 'role' not in session:
        return redirect(url_for('auth.login'))
    role = session['role']
    if role == 'Admin':
        return redirect(url_for('admin.admin_dashboard'))
    elif role == 'Manager':
        return redirect(url_for('manager.manager_dashboard'))
    elif role == 'Employee':
        return redirect(url_for('employee.employee_dashboard'))
    else:
        return redirect(url_for('auth.login'))

if __name__ == '__main__':
    app.run(debug=True)
'''